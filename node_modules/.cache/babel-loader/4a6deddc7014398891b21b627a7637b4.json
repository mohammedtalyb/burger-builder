{"ast":null,"code":"import _objectSpread from \"/home/mohammed/Documents/react Max/react project/burger-builder/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/mohammed/Documents/react Max/react project/burger-builder/src/containers/Orders/Orders.js\";\nimport React, { Component } from 'react';\nimport Order from '../../components/Order/Order';\nimport axios from '../../axios-orders';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport withErrorHandler from '../../Hoc/withErrorHandler/withErrorHandler';\n\nclass orders extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      orders: [],\n      isLoading: true\n    };\n  }\n\n  componentDidMount() {\n    axios.get('/order').then(response => {\n      const fetchedOrders = [];\n\n      for (let order in response.data) {\n        fetchedOrders.push(_objectSpread({}, response.data[order], {\n          key: order\n        }));\n      }\n\n      this.setState({\n        orders: fetchedOrders,\n        isLoading: false\n      });\n    }).catch(error => {\n      console.log('fff');\n      this.setState({\n        isLoading: false\n      });\n    });\n  }\n\n  render() {\n    let orders = React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    });\n    if (!this.state.isLoading) orders = this.state.orders.map(order => {\n      return React.createElement(Order, {\n        ingredients: order.ingredients,\n        key: order.key,\n        totalPrice: +order.totalPrice,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      });\n    });\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, orders);\n  }\n\n}\n\nexport default withErrorHandler(orders, axios);","map":{"version":3,"sources":["/home/mohammed/Documents/react Max/react project/burger-builder/src/containers/Orders/Orders.js"],"names":["React","Component","Order","axios","Spinner","withErrorHandler","orders","state","isLoading","componentDidMount","get","then","response","fetchedOrders","order","data","push","key","setState","catch","error","console","log","render","map","ingredients","totalPrice"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,8BAAlB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,OAAP,MAAoB,qCAApB;AACA,OAAOC,gBAAP,MAA6B,6CAA7B;;AAEA,MAAMC,MAAN,SAAqBL,SAArB,CAA+B;AAAA;AAAA;AAAA,SAC3BM,KAD2B,GACnB;AACJD,MAAAA,MAAM,EAAE,EADJ;AAEJE,MAAAA,SAAS,EAAE;AAFP,KADmB;AAAA;;AAM3BC,EAAAA,iBAAiB,GAAI;AACjBN,IAAAA,KAAK,CAACO,GAAN,CAAU,QAAV,EACKC,IADL,CACUC,QAAQ,IAAI;AAEd,YAAMC,aAAa,GAAG,EAAtB;;AACA,WAAI,IAAIC,KAAR,IAAiBF,QAAQ,CAACG,IAA1B,EAAgC;AAC5BF,QAAAA,aAAa,CAACG,IAAd,mBACOJ,QAAQ,CAACG,IAAT,CAAcD,KAAd,CADP;AAEIG,UAAAA,GAAG,EAAEH;AAFT;AAIH;;AACD,WAAKI,QAAL,CAAc;AAAEZ,QAAAA,MAAM,EAAEO,aAAV;AAAyBL,QAAAA,SAAS,EAAE;AAApC,OAAd;AACH,KAXL,EAYKW,KAZL,CAYWC,KAAK,IAAI;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACA,WAAKJ,QAAL,CAAc;AAACV,QAAAA,SAAS,EAAE;AAAZ,OAAd;AACH,KAfL;AAgBH;;AACDe,EAAAA,MAAM,GAAG;AACL,QAAIjB,MAAM,GAAG,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAb;AAEA,QAAG,CAAC,KAAKC,KAAL,CAAWC,SAAf,EAA0BF,MAAM,GAAG,KAAKC,KAAL,CAAWD,MAAX,CAAkBkB,GAAlB,CAAsBV,KAAK,IAAG;AAC7D,aAAO,oBAAC,KAAD;AACK,QAAA,WAAW,EAAEA,KAAK,CAACW,WADxB;AAEK,QAAA,GAAG,EAAEX,KAAK,CAACG,GAFhB;AAGK,QAAA,UAAU,EAAG,CAACH,KAAK,CAACY,UAHzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AAIH,KALkC,CAAT;AAO1B,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKpB,MADL,CADJ;AAKH;;AAvC0B;;AA0C/B,eAAeD,gBAAgB,CAACC,MAAD,EAASH,KAAT,CAA/B","sourcesContent":["import React, { Component } from 'react';\nimport Order from '../../components/Order/Order';\nimport axios from '../../axios-orders';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport withErrorHandler from '../../Hoc/withErrorHandler/withErrorHandler';\n\nclass orders extends Component {\n    state = {\n        orders: [],\n        isLoading: true\n    }\n\n    componentDidMount () {\n        axios.get('/order')\n            .then(response => {\n                \n                const fetchedOrders = [];\n                for(let order in response.data) {\n                    fetchedOrders.push({\n                        ...response.data[order],\n                        key: order\n                    });\n                }\n                this.setState({ orders: fetchedOrders, isLoading: false}) \n            })\n            .catch(error => {\n                console.log('fff')\n                this.setState({isLoading: false});\n            })\n    }\n    render() {\n        let orders = <Spinner />;\n\n        if(!this.state.isLoading) orders = this.state.orders.map(order =>{\n            return <Order\n                        ingredients={order.ingredients}\n                        key={order.key}\n                        totalPrice={ +order.totalPrice } />\n        }) ;\n\n        return (\n            <div>\n                {orders}\n            </div>\n        );\n    }\n}\n\nexport default withErrorHandler(orders, axios);"]},"metadata":{},"sourceType":"module"}