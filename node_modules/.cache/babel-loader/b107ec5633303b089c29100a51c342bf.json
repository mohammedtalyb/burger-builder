{"ast":null,"code":"import _objectSpread from \"/home/mohammed/Documents/react Max/react project/burger-builder/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/mohammed/Documents/react Max/react project/burger-builder/src/containers/ContactData/ContactData.js\";\nimport React, { Component } from 'react';\nimport classes from './ContactData.css';\nimport Button from '../../components/UI/Button/Button';\nimport axios from '../../axios-orders';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport Input from '../../components/UI/Input/Input';\n\nclass ContactData extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      orderForm: {\n        name: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your Name'\n          },\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false,\n          value: ''\n        },\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Your Mail'\n          },\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false,\n          value: ''\n        },\n        city: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your City'\n          },\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false,\n          value: ''\n        },\n        pinCode: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your Pincode'\n          },\n          validation: {\n            required: true,\n            minLength: 6,\n            maxLength: 6\n          },\n          valid: false,\n          touched: false,\n          value: ''\n        },\n        deliveryMethod: {\n          elementType: 'select',\n          elementConfig: {\n            options: [{\n              value: 'fastest',\n              displayValue: 'Fastest'\n            }, {\n              value: 'cheapest',\n              displayValue: 'Cheapest'\n            }]\n          },\n          value: 'fastest',\n          validation: {},\n          valid: true\n        }\n      },\n      isFormValid: false,\n      isLoading: false\n    };\n\n    this.inputChangehandler = (event, inputIdenfier) => {\n      const updatedForm = _objectSpread({}, this.state.orderForm);\n\n      const updatedFormElement = _objectSpread({}, updatedForm[inputIdenfier]);\n\n      updatedFormElement.value = event.target.value;\n      updatedFormElement.touched = true;\n      updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n      updatedForm[inputIdenfier] = updatedFormElement;\n      let isFormValid = true;\n\n      for (let inputIdentifierKey in updatedForm) {\n        isFormValid = updatedForm[inputIdentifierKey].valid && isFormValid;\n      }\n\n      this.setState({\n        orderForm: updatedForm,\n        isFormValid: isFormValid\n      });\n    };\n\n    this.orderHandler = event => {\n      event.preventDefault();\n      this.setState({\n        isLoading: true\n      });\n      const formData = {};\n\n      for (let formElementIdentifier in this.state.orderForm) {\n        formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n      }\n\n      const order = {\n        ingredients: this.props.ingredients,\n        totalPrice: this.props.totalPrice,\n        orderData: formData\n      };\n      axios.post('/order.json', order).then(response => {\n        this.setState({\n          isLoading: false\n        });\n        this.props.history.push('/');\n      }).catch(error => this.setState({\n        isLoading: false\n      }));\n    };\n  }\n\n  checkValidity(value, rules) {\n    let isValid = true;\n\n    if (rules.required) {\n      isValid = value.trim() !== '' && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    return isValid;\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n\n    let form = React.createElement(\"form\", {\n      onSubmit: this.orderHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, formElementsArray.map(formElement => React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      changed: event => this.inputChangehandler(event, formElement.id),\n      inValid: !formElement.config.valid,\n      shouldValidate: formElement.config.validation,\n      touched: formElement.config.touched,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    })), React.createElement(Button, {\n      buttonType: \"Success\",\n      disabled: !this.state.isFormValid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, \"Order\"));\n    if (this.state.isLoading) form = React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    });\n    return React.createElement(\"div\", {\n      className: classes.ContactData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, \"Enter your contact data\"), form);\n  }\n\n}\n\nexport default ContactData;","map":{"version":3,"sources":["/home/mohammed/Documents/react Max/react project/burger-builder/src/containers/ContactData/ContactData.js"],"names":["React","Component","classes","Button","axios","Spinner","Input","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","validation","required","valid","touched","value","email","city","pinCode","minLength","maxLength","deliveryMethod","options","displayValue","isFormValid","isLoading","inputChangehandler","event","inputIdenfier","updatedForm","updatedFormElement","target","checkValidity","inputIdentifierKey","setState","orderHandler","preventDefault","formData","formElementIdentifier","order","ingredients","props","totalPrice","orderData","post","then","response","history","push","catch","error","rules","isValid","trim","length","render","formElementsArray","key","id","config","form","map","formElement"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport classes from './ContactData.css';\nimport Button from '../../components/UI/Button/Button';\nimport axios from '../../axios-orders';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport Input from '../../components/UI/Input/Input';\n\nclass ContactData extends Component {\n\n    state = {\n        orderForm: {\n            name: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your Name'\n                },\n                validation: {\n                    required: true,\n                },\n                valid: false,\n                touched: false,\n                value: ''\n            },\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Your Mail'\n                },\n                validation: {\n                    required: true,\n                },\n                valid: false,\n                touched: false,\n                value: ''\n            },\n            city: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your City'\n                },\n                validation: {\n                    required: true,\n                },\n                valid: false,\n                touched: false,\n                value: ''\n            },\n            pinCode: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your Pincode'\n                },\n                validation: {\n                    required: true,\n                    minLength: 6,\n                    maxLength: 6\n                },\n                valid: false,\n                touched: false,\n                value: ''\n            },\n            deliveryMethod: {\n                elementType: 'select',\n                elementConfig: {\n                    options: [\n                        { value: 'fastest', displayValue: 'Fastest' },\n                        { value: 'cheapest', displayValue: 'Cheapest' }\n                    ]\n                },\n                value: 'fastest',\n                validation: {},\n                valid: true\n            }\n        },\n        isFormValid: false,\n        isLoading: false\n    }\n\n    inputChangehandler = (event, inputIdenfier) => {\n        const updatedForm = {...this.state.orderForm};\n        const updatedFormElement = {...updatedForm[inputIdenfier]};\n        updatedFormElement.value = event.target.value;\n        updatedFormElement.touched = true;\n        updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n        updatedForm[inputIdenfier] = updatedFormElement;\n\n        let isFormValid = true;\n        for(let inputIdentifierKey in updatedForm) {\n            isFormValid = updatedForm[inputIdentifierKey].valid && isFormValid;\n        }\n\n        this.setState({orderForm: updatedForm, isFormValid: isFormValid});\n    }\n\n    orderHandler = (event) => {\n        event.preventDefault();\n        this.setState({ isLoading: true });\n\n        const formData = {};\n        for(let formElementIdentifier in this.state.orderForm) {\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n        }\n\n        const order = {\n            ingredients: this.props.ingredients,\n            totalPrice: this.props.totalPrice,\n            orderData: formData\n        }\n\n        axios.post('/order.json', order)\n            .then(response => {\n                this.setState({ isLoading: false });\n                this.props.history.push('/');\n            })\n            .catch(error => this.setState({ isLoading: false }));\n    }\n\n    checkValidity(value, rules) {\n        let isValid = true;\n\n        if(rules.required) {\n            isValid = value.trim() !== '' && isValid;\n        }\n\n        if(rules.minLength) {\n            isValid = value.length >= rules.minLength && isValid;\n        }\n\n        if(rules.maxLength) {\n            isValid = value.length <= rules.maxLength && isValid;\n        }\n\n        return isValid;\n    }\n\n    render() {\n        const formElementsArray = [];\n\n        for (let key in this.state.orderForm) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.orderForm[key],\n            });\n        }\n        let form = (\n            <form onSubmit={this.orderHandler}>\n                {formElementsArray.map(formElement => (\n                    <Input\n                        key={formElement.id}\n                        elementType={formElement.config.elementType}\n                        elementConfig={formElement.config.elementConfig}\n                        value={formElement.config.value}\n                        changed={(event) => this.inputChangehandler(event, formElement.id)}\n                        inValid={!formElement.config.valid}\n                        shouldValidate={formElement.config.validation}\n                        touched={formElement.config.touched} />\n                ))}\n                <Button buttonType=\"Success\" disabled={!this.state.isFormValid}>Order</Button>\n            </form>\n        );\n\n        if (this.state.isLoading) form = <Spinner />;\n\n        return (\n            <div className={classes.ContactData}>\n                <h4>Enter your contact data</h4>\n                {form}\n            </div>\n        );\n    }\n}\n\nexport default ContactData;"]},"metadata":{},"sourceType":"module"}