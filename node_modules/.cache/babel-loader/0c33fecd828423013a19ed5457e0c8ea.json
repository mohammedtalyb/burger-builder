{"ast":null,"code":"import _objectSpread from \"/home/mohammed/Documents/react Max/react project/burger-builder/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/mohammed/Documents/react Max/react project/burger-builder/src/containers/BurgerBuilder/BurgerBuilder.js\";\nimport React, { Component } from 'react';\nimport Aux from '../../Hoc/Aux';\nimport Burger from '../../components/Burger/Burger';\nimport BuildControls from '../../components/Burger/BuildControls/BuildControls';\nconst INGREDIENT_PRICES = {\n  salad: 0.5,\n  cheese: 1,\n  meat: 1.7,\n  bacon: 1\n};\n\nclass BurgerBuilder extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      ingredients: {\n        salad: 0,\n        bacon: 0,\n        meat: 0,\n        cheese: 0\n      },\n      totalprice: 4,\n      purchasable: false\n    };\n\n    this.updatePurchaseState = ingredients => {\n      const sum = Object.keys(ingredients).map(ingredientKey => ingredients[ingredientKey]).reduce((sum, ingredientValue) => sum + ingredientValue, 0);\n      this.setState({\n        purchasable: sum > 0\n      });\n    };\n\n    this.addIngredientHandler = type => {\n      const oldCount = this.state.ingredients[type];\n      const updatedCount = oldCount + 1;\n\n      const updatesIngredients = _objectSpread({}, this.state.ingredients);\n\n      updatesIngredients[type] = updatedCount;\n      const priceAddition = INGREDIENT_PRICES[type];\n      const oldPrice = this.state.totalprice;\n      const newPrice = oldPrice + priceAddition;\n      this.setState({\n        ingredients: updatesIngredients,\n        totalprice: newPrice\n      });\n      this.updatePurchaseState(updatesIngredients);\n    };\n\n    this.removeIngredientHandler = type => {\n      const oldCount = this.state.ingredients[type];\n      if (oldCount <= 0) return;\n      const updatedCount = oldCount - 1;\n\n      const updatesIngredients = _objectSpread({}, this.state.ingredients);\n\n      updatesIngredients[type] = updatedCount;\n      const priceAddition = INGREDIENT_PRICES[type];\n      const oldPrice = this.state.totalprice;\n      const newPrice = oldPrice - priceAddition;\n      this.setState({\n        ingredients: updatesIngredients,\n        totalprice: newPrice\n      });\n      this.updatePurchaseState(updatesIngredients);\n    };\n  }\n\n  render() {\n    const disabledInfo = _objectSpread({}, this.state.ingredients);\n\n    for (let key in disabledInfo) disabledInfo[key] = disabledInfo[key] <= 0;\n\n    return React.createElement(Aux, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(Modal, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }), React.createElement(Burger, {\n      ingredients: this.state.ingredients,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }), React.createElement(BuildControls, {\n      addIngredient: this.addIngredientHandler,\n      removeIngredient: this.removeIngredientHandler,\n      disabledInfo: disabledInfo,\n      price: this.state.totalprice,\n      purchasable: this.state.purchasable,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default BurgerBuilder;","map":{"version":3,"sources":["/home/mohammed/Documents/react Max/react project/burger-builder/src/containers/BurgerBuilder/BurgerBuilder.js"],"names":["React","Component","Aux","Burger","BuildControls","INGREDIENT_PRICES","salad","cheese","meat","bacon","BurgerBuilder","state","ingredients","totalprice","purchasable","updatePurchaseState","sum","Object","keys","map","ingredientKey","reduce","ingredientValue","setState","addIngredientHandler","type","oldCount","updatedCount","updatesIngredients","priceAddition","oldPrice","newPrice","removeIngredientHandler","render","disabledInfo","key"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Aux from '../../Hoc/Aux';\nimport Burger from '../../components/Burger/Burger';\nimport BuildControls from '../../components/Burger/BuildControls/BuildControls';\n\nconst INGREDIENT_PRICES = {\n    salad: 0.5,\n    cheese: 1,\n    meat: 1.7,\n    bacon: 1\n};\n\nclass BurgerBuilder extends Component {\n    state = {\n        ingredients: {\n            salad: 0,\n            bacon: 0,\n            meat: 0,\n            cheese: 0\n        },\n        totalprice: 4,\n        purchasable: false\n    }\n\n    updatePurchaseState = (ingredients) => {\n        const sum = Object.keys(ingredients).map( ingredientKey => ingredients[ingredientKey])\n                    .reduce((sum, ingredientValue) => sum + ingredientValue, 0);\n        this.setState({ purchasable: sum > 0 });\n    }\n\n    addIngredientHandler = (type) => {\n        const oldCount = this.state.ingredients[type];\n        const updatedCount = oldCount + 1;\n        const updatesIngredients = { ...this.state.ingredients };\n        updatesIngredients[type] = updatedCount;\n        const priceAddition = INGREDIENT_PRICES[type];\n        const oldPrice = this.state.totalprice;\n        const newPrice = oldPrice + priceAddition;\n        this.setState({\n            ingredients: updatesIngredients,\n            totalprice: newPrice\n        })\n        this.updatePurchaseState(updatesIngredients);\n    }\n\n    removeIngredientHandler = (type) => {\n        const oldCount = this.state.ingredients[type];\n        if (oldCount <= 0) return;\n        const updatedCount = oldCount - 1;\n        const updatesIngredients = { ...this.state.ingredients };\n        updatesIngredients[type] = updatedCount;\n        const priceAddition = INGREDIENT_PRICES[type];\n        const oldPrice = this.state.totalprice;\n        const newPrice = oldPrice - priceAddition;\n        this.setState({\n            ingredients: updatesIngredients,\n            totalprice: newPrice\n        });\n        this.updatePurchaseState(updatesIngredients);\n    }\n\n    render() {\n        const disabledInfo = {\n            ...this.state.ingredients\n        }\n\n        for (let key in disabledInfo) disabledInfo[key] = disabledInfo[key] <= 0;\n\n        return (\n            <Aux>\n                <Modal />\n                <Burger ingredients={this.state.ingredients} />\n                <BuildControls\n                    addIngredient={this.addIngredientHandler}\n                    removeIngredient={this.removeIngredientHandler}\n                    disabledInfo={disabledInfo}\n                    price={this.state.totalprice}\n                    purchasable={this.state.purchasable} />\n            </Aux>\n        );\n    }\n}\n\nexport default BurgerBuilder;"]},"metadata":{},"sourceType":"module"}