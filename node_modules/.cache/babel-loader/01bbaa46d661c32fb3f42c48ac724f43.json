{"ast":null,"code":"import _objectSpread from \"/home/mohammed/Documents/react Max/react project/burger-builder/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/mohammed/Documents/react Max/react project/burger-builder/src/containers/BurgerBuilder/BurgerBuilder.js\";\nimport React, { Component } from 'react';\nimport Aux from '../../Hoc/Aux/Aux';\nimport Burger from '../../components/Burger/Burger';\nimport BuildControls from '../../components/Burger/BuildControls/BuildControls';\nimport Modal from '../../components/UI/Modal/Modal';\nimport OrderSummary from '../../components/Burger/OrderSummary/OrderSummary';\nimport axios from '../../axios-orders';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport withErrorHandler from '../../Hoc/withErrorHandler/withErrorHandler';\nconst INGREDIENT_PRICES = {\n  salad: 0.5,\n  cheese: 1,\n  meat: 1.7,\n  bacon: 1\n};\n\nclass BurgerBuilder extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      ingredients: null,\n      totalprice: 4,\n      purchasable: false,\n      purchasing: false,\n      isLoading: false,\n      error: false\n    };\n\n    this.updatePurchaseState = ingredients => {\n      const sum = Object.keys(ingredients).map(ingredientKey => ingredients[ingredientKey]).reduce((sum, ingredientValue) => sum + ingredientValue, 0);\n      this.setState({\n        purchasable: sum > 0\n      });\n    };\n\n    this.purchaseHandler = () => {\n      this.setState({\n        purchasing: true\n      });\n    };\n\n    this.purchaseCancelHandler = () => {\n      this.setState({\n        purchasing: false\n      });\n    };\n\n    this.purchaseContinueHandler = () => {\n      this.setState({\n        isLoading: true\n      });\n      const order = {\n        ingredients: this.state.ingredients,\n        totalPrice: this.state.totalprice,\n        customer: {\n          name: 'talib',\n          address: {\n            city: 'mira road',\n            pinCode: '401107'\n          },\n          deliveryMethod: 'fastest'\n        }\n      };\n      axios.post('/order.json', order).then(response => this.setState({\n        isLoading: false,\n        purchasing: false\n      })).catch(error => this.setState({\n        isLoading: false,\n        purchasing: false\n      }));\n    };\n\n    this.addIngredientHandler = type => {\n      const oldCount = this.state.ingredients[type];\n      const updatedCount = oldCount + 1;\n\n      const updatesIngredients = _objectSpread({}, this.state.ingredients);\n\n      updatesIngredients[type] = updatedCount;\n      const priceAddition = INGREDIENT_PRICES[type];\n      const oldPrice = this.state.totalprice;\n      const newPrice = oldPrice + priceAddition;\n      this.setState({\n        ingredients: updatesIngredients,\n        totalprice: newPrice\n      });\n      this.updatePurchaseState(updatesIngredients);\n    };\n\n    this.removeIngredientHandler = type => {\n      const oldCount = this.state.ingredients[type];\n      if (oldCount <= 0) return;\n      const updatedCount = oldCount - 1;\n\n      const updatesIngredients = _objectSpread({}, this.state.ingredients);\n\n      updatesIngredients[type] = updatedCount;\n      const priceAddition = INGREDIENT_PRICES[type];\n      const oldPrice = this.state.totalprice;\n      const newPrice = oldPrice - priceAddition;\n      this.setState({\n        ingredients: updatesIngredients,\n        totalprice: newPrice\n      });\n      this.updatePurchaseState(updatesIngredients);\n    };\n  }\n\n  componentDidMount() {\n    axios.get('https://react-burger-builder-3bb2b.firebaseio.com/ingredients').then(response => this.setState({\n      ingredients: response.data\n    })).catch(error => this.setState({\n      error: true\n    }));\n  }\n\n  render() {\n    const disabledInfo = _objectSpread({}, this.state.ingredients);\n\n    let orderSummary = null;\n    let burger = this.state.error ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \"page Can't load\") : React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    });\n\n    if (this.state.ingredients) {\n      burger = React.createElement(Aux, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(Burger, {\n        ingredients: this.state.ingredients,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }), React.createElement(BuildControls, {\n        addIngredient: this.addIngredientHandler,\n        removeIngredient: this.removeIngredientHandler,\n        disabledInfo: disabledInfo,\n        price: this.state.totalprice,\n        purchasable: this.state.purchasable,\n        ordered: this.purchaseHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }));\n      orderSummary = React.createElement(OrderSummary, {\n        price: this.state.totalprice,\n        continuePurchase: this.purchaseContinueHandler,\n        cancelPurchase: this.purchaseCancelHandler,\n        ingredients: this.state.ingredients,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      });\n    }\n\n    if (this.state.isLoading) orderSummary = React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    });\n\n    for (let key in disabledInfo) disabledInfo[key] = disabledInfo[key] <= 0;\n\n    return React.createElement(Aux, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(Modal, {\n      show: this.state.purchasing,\n      closeModal: this.purchaseCancelHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, orderSummary), burger);\n  }\n\n}\n\nexport default withErrorHandler(BurgerBuilder, axios);","map":{"version":3,"sources":["/home/mohammed/Documents/react Max/react project/burger-builder/src/containers/BurgerBuilder/BurgerBuilder.js"],"names":["React","Component","Aux","Burger","BuildControls","Modal","OrderSummary","axios","Spinner","withErrorHandler","INGREDIENT_PRICES","salad","cheese","meat","bacon","BurgerBuilder","state","ingredients","totalprice","purchasable","purchasing","isLoading","error","updatePurchaseState","sum","Object","keys","map","ingredientKey","reduce","ingredientValue","setState","purchaseHandler","purchaseCancelHandler","purchaseContinueHandler","order","totalPrice","customer","name","address","city","pinCode","deliveryMethod","post","then","response","catch","addIngredientHandler","type","oldCount","updatedCount","updatesIngredients","priceAddition","oldPrice","newPrice","removeIngredientHandler","componentDidMount","get","data","render","disabledInfo","orderSummary","burger","key"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Aux from '../../Hoc/Aux/Aux';\nimport Burger from '../../components/Burger/Burger';\nimport BuildControls from '../../components/Burger/BuildControls/BuildControls';\nimport Modal from '../../components/UI/Modal/Modal';\nimport OrderSummary from '../../components/Burger/OrderSummary/OrderSummary';\nimport axios from '../../axios-orders';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport withErrorHandler from '../../Hoc/withErrorHandler/withErrorHandler';\n\nconst INGREDIENT_PRICES = {\n    salad: 0.5,\n    cheese: 1,\n    meat: 1.7,\n    bacon: 1\n};\n\nclass BurgerBuilder extends Component {\n    state = {\n        ingredients: null,\n        totalprice: 4,\n        purchasable: false,\n        purchasing: false,\n        isLoading: false,\n        error: false\n    }\n\n    componentDidMount() {\n        axios.get('https://react-burger-builder-3bb2b.firebaseio.com/ingredients')\n            .then(response => this.setState({ ingredients: response.data }))\n            .catch(error => this.setState({ error: true }));\n    }\n\n    updatePurchaseState = (ingredients) => {\n        const sum = Object.keys(ingredients).map(ingredientKey => ingredients[ingredientKey])\n            .reduce((sum, ingredientValue) => sum + ingredientValue, 0);\n        this.setState({ purchasable: sum > 0 });\n    }\n\n    purchaseHandler = () => {\n        this.setState({ purchasing: true });\n    }\n\n    purchaseCancelHandler = () => {\n        this.setState({ purchasing: false });\n    }\n\n    purchaseContinueHandler = () => {\n        this.setState({ isLoading: true });\n\n        const order = {\n            ingredients: this.state.ingredients,\n            totalPrice: this.state.totalprice,\n            customer: {\n                name: 'talib',\n                address: {\n                    city: 'mira road',\n                    pinCode: '401107',\n                },\n                deliveryMethod: 'fastest'\n            }\n        }\n\n        axios.post('/order.json', order)\n            .then(response => this.setState({ isLoading: false, purchasing: false }))\n            .catch(error => this.setState({ isLoading: false, purchasing: false }));\n    }\n\n    addIngredientHandler = (type) => {\n        const oldCount = this.state.ingredients[type];\n        const updatedCount = oldCount + 1;\n        const updatesIngredients = { ...this.state.ingredients };\n        updatesIngredients[type] = updatedCount;\n        const priceAddition = INGREDIENT_PRICES[type];\n        const oldPrice = this.state.totalprice;\n        const newPrice = oldPrice + priceAddition;\n        this.setState({\n            ingredients: updatesIngredients,\n            totalprice: newPrice\n        })\n        this.updatePurchaseState(updatesIngredients);\n    }\n\n    removeIngredientHandler = (type) => {\n        const oldCount = this.state.ingredients[type];\n        if (oldCount <= 0) return;\n        const updatedCount = oldCount - 1;\n        const updatesIngredients = { ...this.state.ingredients };\n        updatesIngredients[type] = updatedCount;\n        const priceAddition = INGREDIENT_PRICES[type];\n        const oldPrice = this.state.totalprice;\n        const newPrice = oldPrice - priceAddition;\n        this.setState({\n            ingredients: updatesIngredients,\n            totalprice: newPrice\n        });\n        this.updatePurchaseState(updatesIngredients);\n    }\n\n    render() {\n        const disabledInfo = {\n            ...this.state.ingredients\n        }\n        let orderSummary = null;\n        let burger = this.state.error ? <p>page Can't load</p> : <Spinner />;\n\n        if (this.state.ingredients) {\n            burger = <Aux>\n                        <Burger ingredients={this.state.ingredients} />\n                        <BuildControls\n                            addIngredient={this.addIngredientHandler}\n                            removeIngredient={this.removeIngredientHandler}\n                            disabledInfo={disabledInfo}\n                            price={this.state.totalprice}\n                            purchasable={this.state.purchasable}\n                            ordered={this.purchaseHandler} />\n                    </Aux>;\n\n            orderSummary = <OrderSummary\n                price={this.state.totalprice}\n                continuePurchase={this.purchaseContinueHandler}\n                cancelPurchase={this.purchaseCancelHandler}\n                ingredients={this.state.ingredients} />;\n        }\n\n        if (this.state.isLoading) orderSummary = <Spinner />;\n\n        for (let key in disabledInfo) disabledInfo[key] = disabledInfo[key] <= 0;\n\n        return (\n            <Aux>\n                <Modal show={this.state.purchasing} closeModal={this.purchaseCancelHandler}>\n                    {orderSummary}\n                </Modal>\n                {burger}\n            </Aux>\n        );\n    }\n}\n\nexport default withErrorHandler(BurgerBuilder, axios);"]},"metadata":{},"sourceType":"module"}