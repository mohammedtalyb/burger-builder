{"ast":null,"code":"import _objectSpread from \"/home/mohammed/Documents/react Max/react project/burger-builder/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/mohammed/Documents/react Max/react project/burger-builder/src/containers/BurgerBuilder/BurgerBuilder.js\";\nimport React, { Component } from 'react';\nimport Aux from '../../Hoc/Aux/Aux';\nimport Burger from '../../components/Burger/Burger';\nimport BuildControls from '../../components/Burger/BuildControls/BuildControls';\nimport Modal from '../../components/UI/Modal/Modal';\nimport OrderSummary from '../../components/Burger/OrderSummary/OrderSummary';\nimport axios from '../../axios-orders';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport withErrorHandler from '../../Hoc/withErrorHandler/withErrorHandler';\nconst INGREDIENT_PRICES = {\n  salad: 0.5,\n  cheese: 1,\n  meat: 1.7,\n  bacon: 1\n};\n\nclass BurgerBuilder extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      ingredients: null,\n      totalprice: 4,\n      purchasable: false,\n      purchasing: false,\n      isLoading: false,\n      error: false\n    };\n\n    this.updatePurchaseState = ingredients => {\n      const sum = Object.keys(ingredients).map(ingredientKey => ingredients[ingredientKey]).reduce((sum, ingredientValue) => sum + ingredientValue, 0);\n      this.setState({\n        purchasable: sum > 0\n      });\n    };\n\n    this.purchaseHandler = () => {\n      this.setState({\n        purchasing: true\n      });\n    };\n\n    this.purchaseCancelHandler = () => {\n      this.setState({\n        purchasing: false\n      });\n    };\n\n    this.purchaseContinueHandler = () => {\n      // this.setState({ isLoading: true });\n      // const order = {\n      //     ingredients: this.state.ingredients,\n      //     totalPrice: this.state.totalprice,\n      //     customer: {\n      //         name: 'talib',\n      //         address: {\n      //             city: 'mira road',\n      //             pinCode: '401107',\n      //         },\n      //         deliveryMethod: 'fastest'\n      //     }\n      // }\n      // axios.post('/order.json', order)\n      //     .then(response => this.setState({ isLoading: false, purchasing: false }))\n      //     .catch(error => this.setState({ isLoading: false, purchasing: false }));\n      const queryParams = [];\n\n      for (let ingredientkey in this.state.ingredients) {\n        queryParams.push(encodeURIComponent(ingredientkey) + '=' + encodeURIComponent(this.state.ingredients[ingredientkey]));\n      }\n\n      const queryString = queryParams.join('&');\n      this.props.history.push({\n        pathname: '/checkout',\n        search: '?' + queryString\n      });\n    };\n\n    this.addIngredientHandler = type => {\n      const oldCount = this.state.ingredients[type];\n      const updatedCount = oldCount + 1;\n\n      const updatesIngredients = _objectSpread({}, this.state.ingredients);\n\n      updatesIngredients[type] = updatedCount;\n      const priceAddition = INGREDIENT_PRICES[type];\n      const oldPrice = this.state.totalprice;\n      const newPrice = oldPrice + priceAddition;\n      this.setState({\n        ingredients: updatesIngredients,\n        totalprice: newPrice\n      });\n      this.updatePurchaseState(updatesIngredients);\n    };\n\n    this.removeIngredientHandler = type => {\n      const oldCount = this.state.ingredients[type];\n      if (oldCount <= 0) return;\n      const updatedCount = oldCount - 1;\n\n      const updatesIngredients = _objectSpread({}, this.state.ingredients);\n\n      updatesIngredients[type] = updatedCount;\n      const priceAddition = INGREDIENT_PRICES[type];\n      const oldPrice = this.state.totalprice;\n      const newPrice = oldPrice - priceAddition;\n      this.setState({\n        ingredients: updatesIngredients,\n        totalprice: newPrice\n      });\n      this.updatePurchaseState(updatesIngredients);\n    };\n  }\n\n  componentDidMount() {\n    axios.get('https://react-burger-builder-3bb2b.firebaseio.com/ingredients.json').then(response => this.setState({\n      ingredients: response.data\n    })).catch(error => this.setState({\n      error: true\n    }));\n  }\n\n  render() {\n    const disabledInfo = _objectSpread({}, this.state.ingredients);\n\n    let orderSummary = null;\n    let burger = this.state.error ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, \"page Can't load\") : React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    });\n\n    if (this.state.ingredients) {\n      burger = React.createElement(Aux, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, React.createElement(Burger, {\n        ingredients: this.state.ingredients,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }), React.createElement(BuildControls, {\n        addIngredient: this.addIngredientHandler,\n        removeIngredient: this.removeIngredientHandler,\n        disabledInfo: disabledInfo,\n        price: this.state.totalprice,\n        purchasable: this.state.purchasable,\n        ordered: this.purchaseHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }));\n      orderSummary = React.createElement(OrderSummary, {\n        price: this.state.totalprice,\n        continuePurchase: this.purchaseContinueHandler,\n        cancelPurchase: this.purchaseCancelHandler,\n        ingredients: this.state.ingredients,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      });\n    }\n\n    if (this.state.isLoading) orderSummary = React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    });\n\n    for (let key in disabledInfo) disabledInfo[key] = disabledInfo[key] <= 0;\n\n    return React.createElement(Aux, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(Modal, {\n      show: this.state.purchasing,\n      closeModal: this.purchaseCancelHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, orderSummary), burger);\n  }\n\n}\n\nexport default withErrorHandler(BurgerBuilder, axios);","map":{"version":3,"sources":["/home/mohammed/Documents/react Max/react project/burger-builder/src/containers/BurgerBuilder/BurgerBuilder.js"],"names":["React","Component","Aux","Burger","BuildControls","Modal","OrderSummary","axios","Spinner","withErrorHandler","INGREDIENT_PRICES","salad","cheese","meat","bacon","BurgerBuilder","state","ingredients","totalprice","purchasable","purchasing","isLoading","error","updatePurchaseState","sum","Object","keys","map","ingredientKey","reduce","ingredientValue","setState","purchaseHandler","purchaseCancelHandler","purchaseContinueHandler","queryParams","ingredientkey","push","encodeURIComponent","queryString","join","props","history","pathname","search","addIngredientHandler","type","oldCount","updatedCount","updatesIngredients","priceAddition","oldPrice","newPrice","removeIngredientHandler","componentDidMount","get","then","response","data","catch","render","disabledInfo","orderSummary","burger","key"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Aux from '../../Hoc/Aux/Aux';\nimport Burger from '../../components/Burger/Burger';\nimport BuildControls from '../../components/Burger/BuildControls/BuildControls';\nimport Modal from '../../components/UI/Modal/Modal';\nimport OrderSummary from '../../components/Burger/OrderSummary/OrderSummary';\nimport axios from '../../axios-orders';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport withErrorHandler from '../../Hoc/withErrorHandler/withErrorHandler';\n\nconst INGREDIENT_PRICES = {\n    salad: 0.5,\n    cheese: 1,\n    meat: 1.7,\n    bacon: 1\n};\n\nclass BurgerBuilder extends Component {\n    state = {\n        ingredients: null,\n        totalprice: 4,\n        purchasable: false,\n        purchasing: false,\n        isLoading: false,\n        error: false\n    }\n\n    componentDidMount() {\n        axios.get('https://react-burger-builder-3bb2b.firebaseio.com/ingredients.json')\n            .then(response => this.setState({ ingredients: response.data }))\n            .catch(error => this.setState({ error: true }));\n    }\n\n    updatePurchaseState = (ingredients) => {\n        const sum = Object.keys(ingredients).map(ingredientKey => ingredients[ingredientKey])\n            .reduce((sum, ingredientValue) => sum + ingredientValue, 0);\n        this.setState({ purchasable: sum > 0 });\n    }\n\n    purchaseHandler = () => {\n        this.setState({ purchasing: true });\n    }\n\n    purchaseCancelHandler = () => {\n        this.setState({ purchasing: false });\n    }\n\n    purchaseContinueHandler = () => {\n        // this.setState({ isLoading: true });\n\n        // const order = {\n        //     ingredients: this.state.ingredients,\n        //     totalPrice: this.state.totalprice,\n        //     customer: {\n        //         name: 'talib',\n        //         address: {\n        //             city: 'mira road',\n        //             pinCode: '401107',\n        //         },\n        //         deliveryMethod: 'fastest'\n        //     }\n        // }\n\n        // axios.post('/order.json', order)\n        //     .then(response => this.setState({ isLoading: false, purchasing: false }))\n        //     .catch(error => this.setState({ isLoading: false, purchasing: false }));\n        const queryParams = [];\n        for (let ingredientkey in this.state.ingredients) {\n            queryParams.push(encodeURIComponent(ingredientkey) + '=' +encodeURIComponent(this.state.ingredients[ingredientkey]));\n        }\n        \n        const queryString = queryParams.join('&');\n        this.props.history.push({\n            pathname: '/checkout',\n            search: '?' + queryString\n        });\n    }\n\n    addIngredientHandler = (type) => {\n        const oldCount = this.state.ingredients[type];\n        const updatedCount = oldCount + 1;\n        const updatesIngredients = { ...this.state.ingredients };\n        updatesIngredients[type] = updatedCount;\n        const priceAddition = INGREDIENT_PRICES[type];\n        const oldPrice = this.state.totalprice;\n        const newPrice = oldPrice + priceAddition;\n        this.setState({\n            ingredients: updatesIngredients,\n            totalprice: newPrice\n        })\n        this.updatePurchaseState(updatesIngredients);\n    }\n\n    removeIngredientHandler = (type) => {\n        const oldCount = this.state.ingredients[type];\n        if (oldCount <= 0) return;\n        const updatedCount = oldCount - 1;\n        const updatesIngredients = { ...this.state.ingredients };\n        updatesIngredients[type] = updatedCount;\n        const priceAddition = INGREDIENT_PRICES[type];\n        const oldPrice = this.state.totalprice;\n        const newPrice = oldPrice - priceAddition;\n        this.setState({\n            ingredients: updatesIngredients,\n            totalprice: newPrice\n        });\n        this.updatePurchaseState(updatesIngredients);\n    }\n\n    render() {\n        const disabledInfo = {\n            ...this.state.ingredients\n        }\n        let orderSummary = null;\n        let burger = this.state.error ? <p>page Can't load</p> : <Spinner />;\n\n        if (this.state.ingredients) {\n            burger = <Aux>\n                        <Burger ingredients={this.state.ingredients} />\n                        <BuildControls\n                            addIngredient={this.addIngredientHandler}\n                            removeIngredient={this.removeIngredientHandler}\n                            disabledInfo={disabledInfo}\n                            price={this.state.totalprice}\n                            purchasable={this.state.purchasable}\n                            ordered={this.purchaseHandler} />\n                    </Aux>;\n\n            orderSummary = <OrderSummary\n                price={this.state.totalprice}\n                continuePurchase={this.purchaseContinueHandler}\n                cancelPurchase={this.purchaseCancelHandler}\n                ingredients={this.state.ingredients} />;\n        }\n\n        if (this.state.isLoading) orderSummary = <Spinner />;\n\n        for (let key in disabledInfo) disabledInfo[key] = disabledInfo[key] <= 0;\n\n        return (\n            <Aux>\n                <Modal show={this.state.purchasing} closeModal={this.purchaseCancelHandler}>\n                    {orderSummary}\n                </Modal>\n                {burger}\n            </Aux>\n        );\n    }\n}\n\nexport default withErrorHandler(BurgerBuilder, axios);"]},"metadata":{},"sourceType":"module"}